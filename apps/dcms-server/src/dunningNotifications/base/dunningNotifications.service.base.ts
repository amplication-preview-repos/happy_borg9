/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DunningNotifications as PrismaDunningNotifications,
} from "@prisma/client";

export class DunningNotificationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DunningNotificationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dunningNotifications.count(args);
  }

  async dunningNotificationsItems(
    args: Prisma.DunningNotificationsFindManyArgs
  ): Promise<PrismaDunningNotifications[]> {
    return this.prisma.dunningNotifications.findMany(args);
  }
  async dunningNotifications(
    args: Prisma.DunningNotificationsFindUniqueArgs
  ): Promise<PrismaDunningNotifications | null> {
    return this.prisma.dunningNotifications.findUnique(args);
  }
  async createDunningNotifications(
    args: Prisma.DunningNotificationsCreateArgs
  ): Promise<PrismaDunningNotifications> {
    return this.prisma.dunningNotifications.create(args);
  }
  async updateDunningNotifications(
    args: Prisma.DunningNotificationsUpdateArgs
  ): Promise<PrismaDunningNotifications> {
    return this.prisma.dunningNotifications.update(args);
  }
  async deleteDunningNotifications(
    args: Prisma.DunningNotificationsDeleteArgs
  ): Promise<PrismaDunningNotifications> {
    return this.prisma.dunningNotifications.delete(args);
  }
}
