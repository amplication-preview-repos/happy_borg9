/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DunningNotificationsService } from "../dunningNotifications.service";
import { DunningNotificationsCreateInput } from "./DunningNotificationsCreateInput";
import { DunningNotifications } from "./DunningNotifications";
import { DunningNotificationsFindManyArgs } from "./DunningNotificationsFindManyArgs";
import { DunningNotificationsWhereUniqueInput } from "./DunningNotificationsWhereUniqueInput";
import { DunningNotificationsUpdateInput } from "./DunningNotificationsUpdateInput";

export class DunningNotificationsControllerBase {
  constructor(protected readonly service: DunningNotificationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DunningNotifications })
  async createDunningNotifications(
    @common.Body() data: DunningNotificationsCreateInput
  ): Promise<DunningNotifications> {
    return await this.service.createDunningNotifications({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DunningNotifications] })
  @ApiNestedQuery(DunningNotificationsFindManyArgs)
  async dunningNotificationsItems(
    @common.Req() request: Request
  ): Promise<DunningNotifications[]> {
    const args = plainToClass(DunningNotificationsFindManyArgs, request.query);
    return this.service.dunningNotificationsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DunningNotifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dunningNotifications(
    @common.Param() params: DunningNotificationsWhereUniqueInput
  ): Promise<DunningNotifications | null> {
    const result = await this.service.dunningNotifications({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DunningNotifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDunningNotifications(
    @common.Param() params: DunningNotificationsWhereUniqueInput,
    @common.Body() data: DunningNotificationsUpdateInput
  ): Promise<DunningNotifications | null> {
    try {
      return await this.service.updateDunningNotifications({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DunningNotifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDunningNotifications(
    @common.Param() params: DunningNotificationsWhereUniqueInput
  ): Promise<DunningNotifications | null> {
    try {
      return await this.service.deleteDunningNotifications({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
